Confy is the small and simple library to store struct data such as config. It is available to write data to file and to load it back to struct. Supports nested structs, slices and maps (map cannot contain structs).
Similar to json you can view and edit confy file but more user friendly - file contains field types and indents.

    go get github.com/yurajp/confy@v2
...

Just one parameter you can change: indent size. E.g.:

    confy.SetIndent(4)
Default is "   ".

To store your data struct (e.g. myconf) in file with path 'config/conf':

    err := confy.WriteConfy(myconf, "config/conf")

File name can have any extension you like, file is just text file.
This will write variable 'myconf' of your type to file.
Then you load data to interface variable and convert it to your type.

    var myconf Myconf
    iface, err := confy.LoadConfy(myconf, "config/conf")
    if err...{...}
    config := iface.(Myconf)
    
Another simple feature is ability load variables from local file.
It export them to OS environment (like .godotenv). You should define name or path to file.
Syntax is similar .godotenv:

	SECRET_KEY=98jRj64OYR0864

Loading to OS environment:

	err := confy.LoadEnv("path/to/file")
	if err...
	val := os.Getenv("MY_VAR")
	
You might create file and add a variable by simple code, e.g:

	path := ".env"
 	err := confy.AddVar(path, "MY_VAR", "73aB55uFx")
 	err = confy.AddVar(path, "ANOTHER_VAR", "56Ze77iNm")
 	
This will create file .env with two lines:

    MY_VAR=73aB55uFx
 	ANOTHER_VAR=56Ze77iNm
 	.....
 	
 	confy.LoadEnv(path)
 	myVar := os.Getenv("MY_VAR") // 73aB55uFx
 	.....
 	
That's all for now.

GOOD LUCK!
